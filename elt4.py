# -*- coding: utf-8 -*-
"""elt4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YZLCl1K2Zph7jewP0nWa2nNuzHjPIi3m
"""

from airflow import DAG
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from datetime import datetime
from airflow.models import Variable
import requests

# Default arguments for the DAG
default_args = {
    'owner': 'Divya Thakar',
    'start_date': datetime(2024, 11, 8),
    'retries': 1,
}

# Function to retrieve Snowflake connection from Airflow
def get_snowflake_conn():
    snowflake_hook = SnowflakeHook(snowflake_conn_id='my_snowflake_conn')
    return snowflake_hook.get_conn()

# Define the DAG
with DAG(
    dag_id='stock_price_snowflake_etl',
    default_args=default_args,
    schedule_interval='0 18 * * *',  # Runs daily at 6 PM
    catchup=False
) as dag:

    # Task 1: Fetch stock prices for the last 90 days from Alpha Vantage
    @task
    def last_90day_price(symbol):
        api_key = Variable.get('vantage_api_key')
        url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={api_key}'
        r = requests.get(url)
        data = r.json()
        results = []

        for date, stockinfo in data['Time Series (Daily)'].items():
            stockinfo['date'] = date
            stockinfo['timestamp'] = datetime.now().isoformat()  # Add timestamp
            results.append(stockinfo)

        return results

    # Task 2: Create the Snowflake table with timestamp and date as primary key
    @task
    def create_table():
        conn = get_snowflake_conn()
        create_table_query = """
        CREATE OR REPLACE TABLE raw_data.stock_price (
            date DATE PRIMARY KEY,
            open FLOAT,
            high FLOAT,
            low FLOAT,
            close FLOAT,
            volume BIGINT,
            timestamp TIMESTAMP_NTZ  -- Add timestamp column
        )
        """
        cur = conn.cursor()
        cur.execute(create_table_query)
        cur.close()
        conn.close()

    # Task 3: Insert data into the Snowflake table with idempotency
    @task
    def insert_data(data):
        conn = get_snowflake_conn()
        cur = conn.cursor()
        try:
            # Fetch existing dates from the table
            existing_dates_query = "SELECT date FROM raw_data.stock_price"
            cur.execute(existing_dates_query)
            existing_dates = {row[0] for row in cur.fetchall()}

            insert_query = """
            INSERT INTO raw_data.stock_price (date, open, high, low, close, volume, timestamp)
            VALUES (%(date)s, %(open)s, %(high)s, %(low)s, %(close)s, %(volume)s, %(timestamp)s)
            """

            # Log and insert only records not in the table
            for record in data:
                if record['date'] not in existing_dates:
                    print(f"Inserting record for date: {record['date']}")
                    cur.execute(insert_query, {
                        'date': record['date'],
                        'open': float(record['1. open']),
                        'high': float(record['2. high']),
                        'low': float(record['3. low']),
                        'close': float(record['4. close']),
                        'volume': int(record['5. volume']),
                        'timestamp': record['timestamp']
                    })
                else:
                    print(f"Skipping insert for date: {record['date']} - already exists")

        except Exception as e:
            print("Error during data insertion:", e)
            raise e
        finally:
            cur.close()
            conn.close()

    # Define task dependencies
    stock_prices = last_90day_price('CSCO')
    create_table() >> insert_data(stock_prices)